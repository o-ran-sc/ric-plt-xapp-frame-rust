/*
 * RIC subscription
 *
 * This is the initial REST API for RIC subscription
 *
 * The version of the OpenAPI document: 0.0.4
 *
 * Generated by: https://openapi-generator.tech
 */

use serde_derive::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct SubscriptionInstance {
    #[serde(rename = "XappEventInstanceId")]
    pub xapp_event_instance_id: u32,
    #[serde(rename = "E2EventInstanceId")]
    pub e2_event_instance_id: u32,
    /// Descriptive error cause. Empty string when no error.
    #[serde(rename = "ErrorCause", skip_serializing_if = "Option::is_none")]
    pub error_cause: Option<String>,
    /// Source of error cause.
    #[serde(rename = "ErrorSource", skip_serializing_if = "Option::is_none")]
    pub error_source: Option<ErrorSource>,
    /// Type timeout. xApp should retry if timeout occurs.
    #[serde(rename = "TimeoutType", skip_serializing_if = "Option::is_none")]
    pub timeout_type: Option<TimeoutType>,
}

impl SubscriptionInstance {
    pub fn new(xapp_event_instance_id: u32, e2_event_instance_id: u32) -> SubscriptionInstance {
        SubscriptionInstance {
            xapp_event_instance_id,
            e2_event_instance_id,
            error_cause: None,
            error_source: None,
            timeout_type: None,
        }
    }
}

/// Source of error cause.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ErrorSource {
    #[serde(rename = "SUBMGR")]
    Submgr,
    #[serde(rename = "RTMGR")]
    Rtmgr,
    #[serde(rename = "DBAAS")]
    Dbaas,
    #[serde(rename = "ASN1")]
    Asn1,
    #[serde(rename = "E2Node")]
    E2Node,
}

impl Default for ErrorSource {
    fn default() -> ErrorSource {
        Self::Submgr
    }
}
/// Type timeout. xApp should retry if timeout occurs.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum TimeoutType {
    #[serde(rename = "E2-Timeout")]
    E2Timeout,
    #[serde(rename = "RTMGR-Timeout")]
    RtmgrTimeout,
    #[serde(rename = "DBAAS-Timeout")]
    DbaasTimeout,
}

impl Default for TimeoutType {
    fn default() -> TimeoutType {
        Self::E2Timeout
    }
}
