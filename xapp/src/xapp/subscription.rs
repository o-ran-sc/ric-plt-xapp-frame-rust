// ==================================================================================
//   Copyright (c) 2023 Abhijit Gadgil
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.
// ==================================================================================

use super::{XApp, XAppError};

const SUB_MGR_HOST: &'static str = "http://service-ricplt-submgr-http.ricplt:8088";
const SUBSCRIPTION_URL: &'static str = "ric/v1/subscriptions";

impl XApp {
    /// Send the Subscription
    ///
    /// The subscription information is to be generated by the XApp and the encoded JSON payload is
    /// sent to this API. For Example an XApp can call this API as follows
    ///
    /// ```ignore
    ///     let client = SubscriptionParamsClientEndpoint {
    ///         ...
    ///     };
    ///
    ///     let action = ActionToBeSetup {
    ///         ...
    ///     };
    ///
    ///     let subscription_detail = SubscriptionDetail {
    ///         ...
    ///     };
    ///
    ///     let sub_params = SubscriptionParams {
    ///         ...
    ///     };
    ///
    ///     let json = serde_json::to_string(&sub_params)?;
    ///
    ///     let result = self.xapp.xapp_send_subscription(json);
    ///
    ///     ...
    ///
    /// ```
    pub fn xapp_send_subscription(&self, subscription_json: &str) -> Result<(), XAppError> {
        let path = format!("{}/{}", SUB_MGR_HOST, SUBSCRIPTION_URL);

        let req_client = reqwest::blocking::Client::new();

        log::debug!(
            "Sending Subscription Request: '{}' to '{}'",
            subscription_json,
            path
        );
        let response = req_client
            .post(path)
            .header(reqwest::header::CONTENT_TYPE, "application/json")
            .body(subscription_json.to_string())
            .send()
            .map_err(|e| XAppError(format!("Error sending request: {}", e)))?;

        if response.status().is_success() {
            log::info!(
                "Subscription Response Code: {}, Body: {}",
                response.status(),
                response.text().unwrap()
            );
            Ok(())
        } else {
            Err(XAppError(format!("Error : {}", response.status())))
        }
    }
}
